dplyr::mutate(
value_string = case_when(
is.na(value_id) ~ NA_character_,
variable_class == "factor" ~ as.character(glue::glue('{value_label}')),
variable_class == "haven_labelled" ~ as.character(glue::glue('{value_code} = {value_label}'))
)
) %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class, value_id, value_code, value_label, value_string)
# create look up of values for wide data frame ----
value_lookup <- variable_view_long %>%
tidyr::drop_na(value_id) %>%
dplyr::select(variable_name, value_string) %>%
split(., f = .$variable_name) %>%
purrr::map(., 2) %>%
list_to_lookup(name1 = "variable_name", name2 = "value_codes")
# assemble into wide data frame with 1 row per variable ----
variable_view_wide <- variable_view_long %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class) %>%
dplyr::distinct() %>%
dplyr::left_join(value_lookup, by = "variable_name")
}
# if neither haven labelled nor factors are present, assemble dictionary with just class
if (num_haven == 0 & num_factor == 0) {
return_view <- var_class
} else {
if (form == "long") return_view <- variable_view_long
if (form == "wide") return_view <- variable_view_wide
}
for(j in 1:nrow(return_view)){
return_view$variable_class = paste(return_view$variable_class[j],
data %>% purrr::pluck(return_view$variable_name[j]) %>% zap_attributes() %>% class(),
sep = ", "
)
}
return_view
return_view$variable_class[j]
j
return_view$variable_class
# fetch variable class ----
var_class <- purrr::map(data, class) %>%
purrr::map(., 1) %>%
tibble::enframe(name = "variable_name", value = "variable_class") %>%
tibble::rowid_to_column(var = "variable_id") %>%
tidyr::unnest(variable_class)
# number of factors ----
num_factor <- sum(var_class[["variable_class"]] == "factor")
# number of haven labelled ----
num_haven  <- sum(var_class[["variable_class"]] == "haven_labelled")
if(num_haven == 0) {
code_values_labelled <- NULL
code_labels_labelled <- NULL
} else {
# fetch variable labels ----
var_labels <- data %>%
sjlabelled:::get_label() %>%
tibble::enframe(name = "variable_name", value = "variable_label") %>%
tibble::rowid_to_column(var = "variable_id")
# fetch value codes from haven labelled ----
code_values_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_values) %>%
purrr::map(as.character) %>%
list_to_df(name1 = "variable_name", name2 = "value_code") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
# fetch value labels from haven labelled ----
code_labels_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_labels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label")  %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
}
if(num_factor == 0) {
code_factor <- NULL
} else {
# fetch value levels from factor ----
code_factor <- data %>%
dplyr::select_if(is.factor) %>%
purrr::map(.f = levels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(
value_id = dplyr::row_number(),
value_code = as.character(value_id)
) %>%
dplyr::ungroup()
}
# stack labels and values from haven labelled and factors ----
if(num_haven == 0 & num_factor == 0){
code_labels <- NULL
code_values <- NULL
} else if (num_haven > 0 & num_factor == 0) {
code_labels <- code_labels_labelled
code_values <- code_values_labelled
} else if (num_haven == 0 & num_factor > 0) {
code_labels <- code_factor %>% dplyr::select(variable_name, value_label, value_id)
code_values <- code_factor %>% dplyr::select(variable_name, value_code, value_id)
} else if (num_haven > 0 & num_factor > 0) {
code_labels <- dplyr::bind_rows(code_labels_labelled, code_factor %>% dplyr::select(variable_name, value_label, value_id))
code_values <- dplyr::bind_rows(code_values_labelled, code_factor %>% dplyr::select(variable_name, value_code, value_id))
}
# if either haven labelled or factors are present, assemble dictionary with value and
# label look ups ----
if (num_haven > 0 | num_factor > 0) {
# assemble into long data frame with 1 row per code ----
variable_view_long <- var_labels %>%
dplyr::left_join(var_class, by = c("variable_name", "variable_id")) %>%
dplyr::left_join(code_values, by = c("variable_name")) %>%
dplyr::left_join(code_labels, by = c("variable_name", "value_id")) %>%
dplyr::mutate(
value_string = case_when(
is.na(value_id) ~ NA_character_,
variable_class == "factor" ~ as.character(glue::glue('{value_label}')),
variable_class == "haven_labelled" ~ as.character(glue::glue('{value_code} = {value_label}'))
)
) %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class, value_id, value_code, value_label, value_string)
# create look up of values for wide data frame ----
value_lookup <- variable_view_long %>%
tidyr::drop_na(value_id) %>%
dplyr::select(variable_name, value_string) %>%
split(., f = .$variable_name) %>%
purrr::map(., 2) %>%
list_to_lookup(name1 = "variable_name", name2 = "value_codes")
# assemble into wide data frame with 1 row per variable ----
variable_view_wide <- variable_view_long %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class) %>%
dplyr::distinct() %>%
dplyr::left_join(value_lookup, by = "variable_name")
}
# if neither haven labelled nor factors are present, assemble dictionary with just class
if (num_haven == 0 & num_factor == 0) {
return_view <- var_class
} else {
if (form == "long") return_view <- variable_view_long
if (form == "wide") return_view <- variable_view_wide
}
return_view$variable_class
return_view$variable_class[j]
for(j in 1:nrow(return_view)){
return_view$variable_class = paste(return_view$variable_class[j],
data %>% purrr::pluck(return_view$variable_name[j]) %>% zap_attributes() %>% class(),
sep = ", "
)
}
return_view
# fetch variable class ----
var_class <- purrr::map(data, class) %>%
purrr::map(., 1) %>%
tibble::enframe(name = "variable_name", value = "variable_class") %>%
tibble::rowid_to_column(var = "variable_id") %>%
tidyr::unnest(variable_class)
# number of factors ----
num_factor <- sum(var_class[["variable_class"]] == "factor")
# number of haven labelled ----
num_haven  <- sum(var_class[["variable_class"]] == "haven_labelled")
if(num_haven == 0) {
code_values_labelled <- NULL
code_labels_labelled <- NULL
} else {
# fetch variable labels ----
var_labels <- data %>%
sjlabelled:::get_label() %>%
tibble::enframe(name = "variable_name", value = "variable_label") %>%
tibble::rowid_to_column(var = "variable_id")
# fetch value codes from haven labelled ----
code_values_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_values) %>%
purrr::map(as.character) %>%
list_to_df(name1 = "variable_name", name2 = "value_code") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
# fetch value labels from haven labelled ----
code_labels_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_labels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label")  %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
}
if(num_factor == 0) {
code_factor <- NULL
} else {
# fetch value levels from factor ----
code_factor <- data %>%
dplyr::select_if(is.factor) %>%
purrr::map(.f = levels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(
value_id = dplyr::row_number(),
value_code = as.character(value_id)
) %>%
dplyr::ungroup()
}
# stack labels and values from haven labelled and factors ----
if(num_haven == 0 & num_factor == 0){
code_labels <- NULL
code_values <- NULL
} else if (num_haven > 0 & num_factor == 0) {
code_labels <- code_labels_labelled
code_values <- code_values_labelled
} else if (num_haven == 0 & num_factor > 0) {
code_labels <- code_factor %>% dplyr::select(variable_name, value_label, value_id)
code_values <- code_factor %>% dplyr::select(variable_name, value_code, value_id)
} else if (num_haven > 0 & num_factor > 0) {
code_labels <- dplyr::bind_rows(code_labels_labelled, code_factor %>% dplyr::select(variable_name, value_label, value_id))
code_values <- dplyr::bind_rows(code_values_labelled, code_factor %>% dplyr::select(variable_name, value_code, value_id))
}
# if either haven labelled or factors are present, assemble dictionary with value and
# label look ups ----
if (num_haven > 0 | num_factor > 0) {
# assemble into long data frame with 1 row per code ----
variable_view_long <- var_labels %>%
dplyr::left_join(var_class, by = c("variable_name", "variable_id")) %>%
dplyr::left_join(code_values, by = c("variable_name")) %>%
dplyr::left_join(code_labels, by = c("variable_name", "value_id")) %>%
dplyr::mutate(
value_string = case_when(
is.na(value_id) ~ NA_character_,
variable_class == "factor" ~ as.character(glue::glue('{value_label}')),
variable_class == "haven_labelled" ~ as.character(glue::glue('{value_code} = {value_label}'))
)
) %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class, value_id, value_code, value_label, value_string)
# create look up of values for wide data frame ----
value_lookup <- variable_view_long %>%
tidyr::drop_na(value_id) %>%
dplyr::select(variable_name, value_string) %>%
split(., f = .$variable_name) %>%
purrr::map(., 2) %>%
list_to_lookup(name1 = "variable_name", name2 = "value_codes")
# assemble into wide data frame with 1 row per variable ----
variable_view_wide <- variable_view_long %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class) %>%
dplyr::distinct() %>%
dplyr::left_join(value_lookup, by = "variable_name")
}
# if neither haven labelled nor factors are present, assemble dictionary with just class
if (num_haven == 0 & num_factor == 0) {
return_view <- var_class
} else {
if (form == "long") return_view <- variable_view_long
if (form == "wide") return_view <- variable_view_wide
}
return_view$variable_class[j]
data %>% purrr::pluck(return_view$variable_name[j]) %>% zap_attributes() %>% class()
for(j in 1:nrow(return_view)){
return_view$variable_class[j] = paste(return_view$variable_class[j],
data %>% purrr::pluck(return_view$variable_name[j]) %>% zap_attributes() %>% class(),
sep = ", "
)
}
return_view
# fetch variable class ----
var_class <- purrr::map(data, class) %>%
purrr::map(., 1) %>%
tibble::enframe(name = "variable_name", value = "variable_class") %>%
tibble::rowid_to_column(var = "variable_id") %>%
tidyr::unnest(variable_class)
# number of factors ----
num_factor <- sum(var_class[["variable_class"]] == "factor")
# number of haven labelled ----
num_haven  <- sum(var_class[["variable_class"]] == "haven_labelled")
if(num_haven == 0) {
code_values_labelled <- NULL
code_labels_labelled <- NULL
} else {
# fetch variable labels ----
var_labels <- data %>%
sjlabelled:::get_label() %>%
tibble::enframe(name = "variable_name", value = "variable_label") %>%
tibble::rowid_to_column(var = "variable_id")
# fetch value codes from haven labelled ----
code_values_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_values) %>%
purrr::map(as.character) %>%
list_to_df(name1 = "variable_name", name2 = "value_code") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
# fetch value labels from haven labelled ----
code_labels_labelled <- data %>%
dplyr::select_if(haven::is.labelled) %>%
purrr::map(.f = sjlabelled::get_labels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label")  %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(value_id = dplyr::row_number()) %>%
dplyr::ungroup()
}
if(num_factor == 0) {
code_factor <- NULL
} else {
# fetch value levels from factor ----
code_factor <- data %>%
dplyr::select_if(is.factor) %>%
purrr::map(.f = levels) %>%
list_to_df(name1 = "variable_name", name2 = "value_label") %>%
dplyr::group_by(variable_name) %>%
dplyr::mutate(
value_id = dplyr::row_number(),
value_code = as.character(value_id)
) %>%
dplyr::ungroup()
}
# stack labels and values from haven labelled and factors ----
if(num_haven == 0 & num_factor == 0){
code_labels <- NULL
code_values <- NULL
} else if (num_haven > 0 & num_factor == 0) {
code_labels <- code_labels_labelled
code_values <- code_values_labelled
} else if (num_haven == 0 & num_factor > 0) {
code_labels <- code_factor %>% dplyr::select(variable_name, value_label, value_id)
code_values <- code_factor %>% dplyr::select(variable_name, value_code, value_id)
} else if (num_haven > 0 & num_factor > 0) {
code_labels <- dplyr::bind_rows(code_labels_labelled, code_factor %>% dplyr::select(variable_name, value_label, value_id))
code_values <- dplyr::bind_rows(code_values_labelled, code_factor %>% dplyr::select(variable_name, value_code, value_id))
}
# if either haven labelled or factors are present, assemble dictionary with value and
# label look ups ----
if (num_haven > 0 | num_factor > 0) {
# assemble into long data frame with 1 row per code ----
variable_view_long <- var_labels %>%
dplyr::left_join(var_class, by = c("variable_name", "variable_id")) %>%
dplyr::left_join(code_values, by = c("variable_name")) %>%
dplyr::left_join(code_labels, by = c("variable_name", "value_id")) %>%
dplyr::mutate(
value_string = case_when(
is.na(value_id) ~ NA_character_,
variable_class == "factor" ~ as.character(glue::glue('{value_label}')),
variable_class == "haven_labelled" ~ as.character(glue::glue('{value_code} = {value_label}'))
)
) %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class, value_id, value_code, value_label, value_string)
# create look up of values for wide data frame ----
value_lookup <- variable_view_long %>%
tidyr::drop_na(value_id) %>%
dplyr::select(variable_name, value_string) %>%
split(., f = .$variable_name) %>%
purrr::map(., 2) %>%
list_to_lookup(name1 = "variable_name", name2 = "value_codes")
# assemble into wide data frame with 1 row per variable ----
variable_view_wide <- variable_view_long %>%
dplyr::select(variable_id, variable_name, variable_label, variable_class) %>%
dplyr::distinct() %>%
dplyr::left_join(value_lookup, by = "variable_name")
}
# if neither haven labelled nor factors are present, assemble dictionary with just class
if (num_haven == 0 & num_factor == 0) {
return_view <- var_class
} else {
if (form == "long") return_view <- variable_view_long
if (form == "wide") return_view <- variable_view_wide
}
for(j in 1:nrow(return_view)){
return_view$variable_class[j] = paste(data %>% purrr::pluck(return_view$variable_name[j]) %>% zap_attributes() %>% class(),
return_view$variable_class[j],
sep = ", "
)
}
return_view
nsch_dat$fipsst
nsch_dat$fipsst %>% table()
rm(list = ls())
?use_data
library(KidsightsGovtDatasets)
out_list = KidsightsGovtDatasets::recode_cahmi()
out_list$dictionary
View(out_list$dictionary)
names(out_list$data)
rm(list = ls())
library(KidsightsGovtDatasets)
out_list = KidsightsGovtDatasets::recode_cahmi()
View(out_list$dictionary)
rm(list = ls())
require(haven)
require(tidyverse)
require(readr)
require(usethis)
require(tibble)
require(dataMeta)
OneDrive_Rpkgs_root = "C:/Users/marcu/OneDrive - University of Nebraska Medical Center"
OneDrive_Rpkgs_path = paste0(OneDrive_Rpkgs_root, "/R Packages")
Github_Repo_root = "C:/Users/marcu/Dropbox/GitKraken/white-rhino/"
Github_Repo_path = paste0(Github_Repo_root, "/repositories/Kidsights_NSCH_ACS/")
#### (If necessary) Step 1: Update sysdata.rda (Data that will automatically be loaded when KidsightsGovtDatasets loaded) ####
# # Source datasets that need to automatically be loaded into KidsightsGovtDatasets
# cahmi_2019_2020 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2019-2020 NSCH_Topical_CAHMI_DRC.dta"))
# cahmi_2017_2018 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2017-2018 NSCH_topical_DRC_Dec 2019.dta"))
# cahmi_2016 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2016NSCHTopical_DRCv3__Stata13_Sep2018.dta"))
#
# # Constructed datasets that need to be automatically loaded into KidsightsGovtDatasets
# vars_df = readxl::read_excel(path=paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/constructed-data/gameplan-combined-acs-nsch.xlsx"),
#                              sheet = "vars")
#
#
# usethis::use_data(cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars_df,
#                   internal = TRUE, overwrite = TRUE, compress = "gzip")
#### (Optional, but a good idea) Step 2: Check Package ####
#   Check Package:             'Ctrl + Shift + E'
#### Step 3: Install Package ####
#   Install Package:           'Ctrl + Shift + B'
#### Step 4: Check Package ###
library(KidsightsGovtDatasets)
out_list = KidsightsGovtDatasets::recode_cahmi()
rm(list = ls())
require(haven)
require(tidyverse)
require(readr)
require(usethis)
require(tibble)
require(dataMeta)
OneDrive_Rpkgs_root = "C:/Users/marcu/OneDrive - University of Nebraska Medical Center"
OneDrive_Rpkgs_path = paste0(OneDrive_Rpkgs_root, "/R Packages")
Github_Repo_root = "C:/Users/marcu/Dropbox/GitKraken/white-rhino/"
Github_Repo_path = paste0(Github_Repo_root, "/repositories/Kidsights_NSCH_ACS/")
library(KidsightsGovtDatasets)
out_list = KidsightsGovtDatasets::recode_cahmi()
out_list$dictionary
View(out_list$dictionary)
cahmi_2019_2020 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2019-2020 NSCH_Topical_CAHMI_DRC.dta"))
cahmi_2017_2018 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2017-2018 NSCH_topical_DRC_Dec 2019.dta"))
cahmi_2016 = haven::read_dta(paste0(OneDrive_Rpkgs_path,"/KidsightsGovtDatasets/data-files/source-data/NSCH/2016NSCHTopical_DRCv3__Stata13_Sep2018.dta"))
require(tidyverse)
require(haven)
############### year, fipsst, stratum, hhid, fwc #####################
cahmi_2016_2020 = list(extract_vars_cahmi(source="2019-2020", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016),
extract_vars_cahmi(source="2017-2018", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016),
extract_vars_cahmi(source="2016", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016)) %>%
dplyr::bind_rows() # Combined dataset
# Check the weights are correct noting that under 18 pop is around 73 million in 2020
#sum(cahmi_2016_2020$fwc) # 73222987, correct
########  a1_grade: Caregiver 1 Educational Attainment #############
#2021
# 2019-2020
tmp_1920 = extract_vars_cahmi(source = "2019-2020", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "a1_grade")
#2017-2018
tmp_1718 = extract_vars_cahmi(source = "2017-2018", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "A1_GRADE") %>%
mutate(a1_grade = ifelse(a1_grade>=90, NA,a1_grade))
# 2016:
tmp_16 = extract_vars_cahmi(source = "2016", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "A1_GRADE") %>%
mutate(a1_grade = ifelse(a1_grade>=90, NA,a1_grade))
tmp_16_20 = list(tmp_1920,tmp_1718,tmp_16) %>% bind_rows()
nrow(cahmi_2016_2020)==nrow(tmp_16_20)
nrow(cahmi_2016_2020)
cahmi_2016_2020 = cahmi_2016_2020 %>%
left_join(tmp_16_20, by = c("year","fipsst","stratum","hhid", "fwc"))
nrow(cahmi_2016_2020)
rm(list = ls()[startsWith(ls(),"tmp")])
########  a2_grade: Caregiver 2 Educational Attainment #############
# 2019-2020
tmp_1920 = extract_vars_cahmi(source = "2019-2020", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "a2_grade")
#unique(tmp_1920$a2_grade)
#2017-2018
tmp_1718 = extract_vars_cahmi(source = "2017-2018", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "A2_GRADE")
#unique(tmp_1718$a2_grade)
tmp_1718 = tmp_1718 %>%
mutate(a2_grade = ifelse(a2_grade>=90, NA,a2_grade))
# 2016:
tmp_16 = extract_vars_cahmi(source = "2016", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "A2_GRADE")
#unique(tmp_16$a2_grade)
tmp_16_20 = list(tmp_1920,tmp_1718,tmp_16) %>% bind_rows()
nrow(cahmi_2016_2020)==nrow(tmp_16_20)
nrow(cahmi_2016_2020)
cahmi_2016_2020 = cahmi_2016_2020 %>%
left_join(tmp_16_20, by = c("year","fipsst","stratum","hhid", "fwc"))
nrow(cahmi_2016_2020)
rm(list = ls()[startsWith(ls(),"tmp")])
###### adulteduc ##########
tmp_1920 = extract_vars_cahmi(source = "2019-2020", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "AdultEduc_1920") %>%
mutate(adulteduc = AdultEduc_1920) %>% dplyr::select(-AdultEduc_1920)
unique(tmp_1920$adulteduc)
#2017-2018
tmp_1718 = extract_vars_cahmi(source = "2017-2018", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "AdultEduc_1718") %>%
mutate(adulteduc = adulteduc_1718) %>% dplyr::select(-adulteduc_1718)
unique(tmp_1718$adulteduc)
# 2016:
tmp_16 = extract_vars_cahmi(source = "2016", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "AdultEduc_16") %>%
mutate(adulteduc = adulteduc_16) %>% dplyr::select(-adulteduc_16)
unique(tmp_16$adulteduc)
tmp_16_20 = list(tmp_1920,tmp_1718,tmp_16) %>% bind_rows()
tmp_16_20$adulteduc[tmp_16_20$adulteduc>=90] = NA
nrow(cahmi_2016_2020)==nrow(tmp_16_20)
nrow(cahmi_2016_2020)
cahmi_2016_2020 = cahmi_2016_2020 %>%
left_join(tmp_16_20, by = c("year","fipsst","stratum","hhid", "fwc"))
nrow(cahmi_2016_2020)
rm(list = ls()[startsWith(ls(),"tmp")])
############### Percent Above Poverty Line #####################
# 2019-2020
tmp_1920 = extract_vars_cahmi(source = "2019-2020", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "fpl_i1")
#2017-2018
tmp_1718 = extract_vars_cahmi(source = "2017-2018", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "FPL_I1")
# 2016:
tmp_16 = extract_vars_cahmi(source = "2016", cahmi_2019_2020, cahmi_2017_2018, cahmi_2016, vars = "FPL")
tmp_16 = tmp_16 %>% mutate(fpl_i1 = fpl) %>%
dplyr::select(-all_of("fpl"))
identical(names(tmp_1920),names(tmp_1718))
identical(names(tmp_1920),names(tmp_16))
tmp_16_20 = list(tmp_1920,tmp_1718,tmp_16) %>% bind_rows()
head(tmp_16_20)
haven::print_labels(tmp_16_20$fpl_i1)
unique(tmp_16_20$fpl_i1)
unique(out_list$data$fpl_i1)
